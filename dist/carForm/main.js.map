{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/_service/appdata.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  Carsurl : \"https://s3-ap-southeast-1.amazonaws.com/he-public-data/\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AppdataService } from './_service/appdata.service';\nimport * as FileSaver from 'file-saver';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'carForm';\n  pattern = \"^[a-zA-Z]+$\";\n  CarOptions: any;\n  AutoPartOptions: any;\n\n  constructor(public appService : AppdataService) { }\n\n  ngOnInit(): void {\n    this.CarOptions = this.appService.getCarsOptions();\n    this.AutoPartOptions = this.appService.getAutoPartsOptions();\n  }\n\n  CarForm = new FormGroup({\n    fullName : new FormControl('', [Validators.required, Validators.maxLength(75), Validators.pattern(this.pattern)]),\n    cars : new FormControl('',Validators.required),\n    autoParts : new FormControl([]),\n    color : new FormControl('')\n  });\n\n  get fullName(){\n     return this.CarForm.get('fullName');\n  }\n\n  register(){\n    this.appService.submitUser(this.CarForm.value);\n    var file = JSON.stringify(this.CarForm.value);\n    var blob = new Blob([file], {type: \"application/json\"});\n    FileSaver.saveAs(blob,\"Response.json\");\n    this.CarForm.reset();\n  }\n}\n","<div class=\"container\">\n  <div class=\"card\" style=\"margin-top: 30px;\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">Car Registration Form</h5>\n      <div class=\"card-body\">\n        <form [formGroup] = \"CarForm\" (ngSubmit)=\"register()\">\n          <div class=\"form-group row\">\n            <label for=\"fullName\" class=\"col-sm-2\">Full Name</label>\n            <input type=\"text\" id = \"fullName\"  class=\"form-control col-sm-5\"  style=\"margin-right: 3px;\" formControlName=\"fullName\" autocomplete=\"off\" required>\n            <div class=\"col-sm-4 alert-danger form-control\" *ngIf = \"fullName.invalid && (fullName.touched || fullName.dirty)\">\n              <div *ngIf = \"fullName.errors?.required \"> Full Name is required. </div>\n              <div *ngIf = \"fullName.errors?.maxlength\"> Maximum length reached(75 characters). </div>\n              <div *ngIf = \"fullName.errors?.pattern\"> Full Name must contain characters only. </div>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label for=\"cars\" class=\"col-sm-2\">Car Model</label>\n            <ng-select choosen name=\"cars\" id=\"cars\" class=\"col-sm-5\" [editableSearchTerm]=\"true\" formControlName=\"cars\" style=\"padding: 0px;\" required>\n              <ng-option *ngFor = \" let car of CarOptions | async\" [value]=\"car.brand\">{{car.brand}}</ng-option>\n            </ng-select>\n          </div>\n          <div class=\"form-group row\">\n            <label for=\"autoParts\" class=\"col-sm-2\">Auto Parts</label>\n            <ng-select choosen name=\"autoParts\" id=\"autoParts\" class=\"col-sm-5\" [multiple]=\"true\" [editableSearchTerm]=\"true\" formControlName=\"autoParts\" style=\"padding: 0px;\">\n              <ng-option *ngFor = \" let part of AutoPartOptions | async\" [value]=\"part['List of auto parts']\">{{part[\"List of auto parts\"]}}</ng-option>\n            </ng-select>\n          </div>\n          <div class=\"form-group row\">\n            <label for=\"fullName\" class=\"col-sm-2\">Full Name</label>\n            <input type=\"color\" class=\"form-control col-sm-1\" id=\"color\" formControlName=\"color\">\n          </div>\n\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"CarForm.invalid\">Register</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { NgOptionHighlightModule } from '@ng-select/ng-option-highlight';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    HttpClientModule,\n    NgOptionHighlightModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppdataService {\n\n  constructor( private http : HttpClient ) { }\n\n  getCarsOptions(){\n    return this.http.get(environment.Carsurl + \"Cars9096be5.json\");\n  }\n\n  getAutoPartsOptions(){\n    return this.http.get(environment.Carsurl + \"ListOfAutoParts1aaa4e5.json\");\n  }\n\n  submitUser(userData){\n    return this.http.post('/assets/result.json',userData);\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}